##Leetcode

#1957. Delete Characters to Make Fancy String [Easy]

Link: https://leetcode.com/problems/delete-characters-to-make-fancy-string/description/?envType=daily-question&envId=2025-07-21
---

# Delete Characters to Make Fancy String

## Problem Statement

A **fancy string** is a string in which **no three consecutive characters are the same**.

Given a string `s`, your task is to **delete the minimum number of characters** to make the string fancy.

Return the resulting fancy string. It can be shown that the answer is always **unique**.

---

### Examples

#### Example 1

Input: s = "leeetcode"
Output: "leetcode"
Explanation:
Remove one 'e' ‚Üí "leetcode". No three consecutive characters are equal.

---


---

## üìö Intuition & Strategy

To ensure no three identical characters occur in a row, we must allow **at most two consecutive identical characters**.

We iterate through the input string and build a result string character-by-character:
- At every step, check the **last two characters** in the result.
- If both are equal to the current character, we **skip** the current character.
- Otherwise, we add it to the result.

---

## üß† Algorithm

1. Initialize an empty list `result` to build the final fancy string.
2. Iterate through each character in `s`.
3. If the last two characters in `result` match the current character:
   - Skip it.
4. Else:
   - Append the character to `result`.
5. Finally, convert the list to a string and return it.

---

## üîç Dry Run

Input: `"aaabaaaa"`

| Step | Char | Result        | Explanation                            |
|------|------|---------------|----------------------------------------|
| 1    | a    | `['a']`       | First char, add                        |
| 2    | a    | `['a', 'a']`  | Second same char, still okay           |
| 3    | a    | `['a', 'a']`  | Third same ‚Üí skip                      |
| 4    | b    | `['a', 'a', 'b']` | Different ‚Üí add                    |
| 5    | a    | `['a', 'a', 'b', 'a']` | Add                        |
| 6    | a    | `['a', 'a', 'b', 'a', 'a']` | Add                    |
| 7    | a    | `['a', 'a', 'b', 'a', 'a']` | Skip (3rd in a row)     |
| 8    | a    | `['a', 'a', 'b', 'a', 'a']` | Skip                    |

Final result: `"aabaa"`

---

## üßÆ Time & Space Complexity

- **Time Complexity:** `O(n)`  
  Only one pass through the string.
  
- **Space Complexity:** `O(n)`  
  We use a list to store the characters of the final string.

---



